// Button1.c
// Uses edge triggered interrupt to detect button press

// EdgeInterrupt.c
// Runs on LM4F120 or TM4C123
// Request an interrupt on the falling edge of PF4 (when the user
// button is pressed) and increment a counter in the interrupt.  Note
// that button bouncing is not addressed.
// Daniel Valvano
// May 3, 2015

// user button connected to PA4

#include <stdint.h>
#include "../inc/tm4c123gh6pm.h"

void DisableInterrupts(void); // Disable interrupts
void EnableInterrupts(void);  // Enable interrupts
long StartCritical (void);    // previous I bit, disable interrupts
void EndCritical(long sr);    // restore I bit to previous value
void WaitForInterrupt(void);  // low power mode

int buttonPress

void EdgeCounterA_Init(void){    
	DisableInterrupts();
  SYSCTL_RCGCGPIO_R |= 0x00000001; 	// activate clock for port A
	__nop();
	__nop();
  GPIO_PORTA_DIR_R &= ~0x10;    		// make PF4 in (built-in button)
  GPIO_PORTA_AFSEL_R &= ~0x10;  		// disable alt funct on PA4
  GPIO_PORTA_DEN_R |= 0x10;     		// enable digital I/O on PA4 
  GPIO_PORTA_PCTL_R &= ~0x000F0000; // configure PF4 as GPIO
  GPIO_PORTA_AMSEL_R = 0;       		// disable analog functionality on PA4
  GPIO_PORTA_PUR_R |= 0x10;     		// enable weak pull-up on PA4
  GPIO_PORTA_IS_R &= ~0x10;     		// PA4 is edge-sensitive
  GPIO_PORTA_IBE_R &= ~0x10;    		// PA4 is not both edges
  GPIO_PORTA_IEV_R &= ~0x10;    		// PA4 falling edge event
  GPIO_PORTA_ICR_R = 0x10;      		// clear flag for PA4
  GPIO_PORTA_IM_R |= 0x10;      		// arm interrupt on PA4
  NVIC_PRI7_R = (NVIC_PRI7_R&0xFF00FFFF)|0x00B00000; // priority 6
  NVIC_EN0_R = 0x40000000;      		// enable interrupt 0 in NVIC
  EnableInterrupts();           		// Clears the I bit
}

void GPIOPortA_Handler(void){
  PF2 ^= 0xFF;
  Pause();
}

